}
return(MaxRunSoFar)
}
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTTTHHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTTTHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTHTTHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTHTTHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
df <- NULL
for(i in 1:10000){
new <- longestRun(sample(c("H","T"), 200,replace=T))
df = rbind(df, data.frame(as.numeric(new)))
}
hist(unlist(df))
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTHTTHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
df <- NULL
for(i in 1:10000){
new <- longestRun(sample(c("H","T"), 200,replace=T))
df = rbind(df, data.frame(as.numeric(new)))
}
df
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTHTTHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
df <- NULL
for(i in 1:10000){
new <- longestRun(sample(c("H","T"), 200,replace=T))
df = rbind(df, data.frame(as.numeric(new)))
}
right_side <- df %>% filter(X > 4)
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTHTTHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
df <- NULL
for(i in 1:10000){
new <- longestRun(sample(c("H","T"), 200,replace=T))
df = rbind(df, data.frame(as.numeric(new)))
}
df
right_side <- df %>% filter(X >= 4)
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTHTTHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
df <- NULL
for(i in 1:10000){
new <- longestRun(sample(c("H","T"), 200,replace=T))
df = rbind(df, data.frame(longest_run = as.numeric(new)))
}
df
right_side <- df %>% filter(longest_run >= 4)
p_val <- nrow(right_side) / nrow(df)
p_val
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTHTTHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
df <- NULL
for(i in 1:10000){
new <- longestRun(sample(c("H","T"), 200,replace=T))
df = rbind(df, data.frame(longest_run = as.numeric(new)))
}
df
right_side <- df %>% filter(longest_run >= 5)
p_val <- nrow(right_side) / nrow(df)
p_val
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTHTTHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
df <- NULL
for(i in 1:10000){
new <- longestRun(sample(c("H","T"), 200,replace=T))
df = rbind(df, data.frame(longest_run = as.numeric(new)))
}
hist(unlist(df))
right_side <- df %>% filter(longest_run >= 5)
p_val <- nrow(right_side) / nrow(df)
p_val
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTHTTHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
df <- NULL
for(i in 1:10000){
new <- longestRun(sample(c("H","T"), 200,replace=T))
df = rbind(df, data.frame(longest_run = as.numeric(new)))
}
ggplot(df, aes(x = longest_run)) +
geom_histogram() +
geom_vline(xintercept = s)
right_side <- df %>% filter(longest_run >= 5)
p_val <- nrow(right_side) / nrow(df)
p_val
# Copy and paste the code from the top of chapter 2.
# Then, edit the functions simulate_X and check_if_X_in_A
# First, write a function to simulate X
simulate_X = function(){
return(rbinom(n = 1, size = 16, prob = 0.5))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  >= 13)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 10000
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(X_in_A))
ggplot(monte_carlo, aes(x = X)) +
geom_histogram() +
geom_vline(xintercept = 13)
right_side <- monte_carlo %>% filter(X >= 13)
p_val <- nrow(right_side) / nrow(monte_carlo)
p_val
# Copy and paste the code from the top of chapter 2.
# Then, edit the functions simulate_X and check_if_X_in_A
# First, write a function to simulate X
simulate_X = function(){
return(rbinom(n = 1, size = 16, prob = 0.5))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  >= 13)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 10000
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
monte_carlo = as_tibble(monte_carlo)
p_val = monte_carlo %>% summarise(mean(X_in_A))
ggplot(monte_carlo, aes(x = X)) +
geom_histogram() +
geom_vline(xintercept = 13)
p_val
# First, write a function to simulate X
simulate_X = function(){
return(sample(c("H","T"), 200,replace=T))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  >= 4)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 10000
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
# First, write a function to simulate X
simulate_X = function(){
return(sample(c("H","T"), 200,replace=T))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  >= 4)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 100
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
monte_carlo = as_tibble(monte_carlo)
p_val = monte_carlo %>% summarise(mean(X_in_A))
p_val
# First, write a function to simulate X
simulate_X = function(){
return(sample(c("H","T"), 200,replace=T))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  >= 4)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 100
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
monte_carlo = as_tibble(monte_carlo)
p_val = monte_carlo %>% summarise(mean(X_in_A))
p_val
# First, write a function to simulate X
simulate_X = function(){
return(sample(c("H","T"), 200,replace=T))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  >= 5)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 100
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
monte_carlo = as_tibble(monte_carlo)
p_val = monte_carlo %>% summarise(mean(X_in_A))
p_val
# First, write a function to simulate X
simulate_X = function(){
return(sample(c("H","T"), 200,replace=T))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  <= 5)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 100
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
monte_carlo = as_tibble(monte_carlo)
p_val = monte_carlo %>% summarise(mean(X_in_A))
p_val
# First, write a function to simulate X
simulate_X = function(){
return(sample(c("H","T"), 200,replace=T))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  <= 4)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 100
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
monte_carlo = as_tibble(monte_carlo)
p_val = monte_carlo %>% summarise(mean(X_in_A))
p_val
# First, write a function to simulate X
simulate_X = function(){
return(sample(c("H","T"), 200,replace=T))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  <= 4)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 1000
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
monte_carlo = as_tibble(monte_carlo)
p_val = monte_carlo %>% summarise(mean(X_in_A))
p_val
# First, write a function to simulate X
simulate_X = function(){
return(sample(c("H","T"), 200,replace=T))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  <= 4)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 10000
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
monte_carlo = as_tibble(monte_carlo)
p_val = monte_carlo %>% summarise(mean(X_in_A))
p_val
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTHTTHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
# First, write a function to simulate X
simulate_X = function(){
return(sample(c("H","T"), 200,replace=T))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  <= s)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 10000
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
monte_carlo = as_tibble(monte_carlo)
p_val = monte_carlo %>% summarise(mean(X_in_A))
p_val
sample(c("H","T"), 10000,replace=T)
longest_run(sample(c("H","T"), 10000,replace=T))
longestRun(sample(c("H","T"), 10000,replace=T))
df <- NULL
for(i in 1:10000){
new <- longestRun(sample(c("H","T"), 10000,replace=T))
df = rbind(df, data.frame(longest_run = as.numeric(new)))
}
ggplot(df, aes(x = longest_run)) +
geom_histogram() +
geom_vline(xintercept = 5)
df <- NULL
for(i in 1:1000){
new <- longestRun(sample(c("H","T"), 10000,replace=T))
df = rbind(df, data.frame(longest_run = as.numeric(new)))
}
ggplot(df, aes(x = longest_run)) +
geom_histogram() +
geom_vline(xintercept = 5)
df <- NULL
for(i in 1:10000){
new <- longestRun(sample(c("H","T"), 10000,replace=T))
df = rbind(df, data.frame(longest_run = as.numeric(new)))
}
ggplot(df, aes(x = longest_run)) +
geom_histogram() +
geom_vline(xintercept = 5)
library(dplyr)
library(tidyverse)
# Copy and paste the code from the top of chapter 2.
# Then, edit the functions simulate_X and check_if_X_in_A
# First, write a function to simulate X
simulate_X = function(){
return(rbinom(n = 1, size = 16, prob = 0.5))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  >= 13)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 10000
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
monte_carlo = as_tibble(monte_carlo)
p_val = monte_carlo %>% summarise(mean(X_in_A))
ggplot(monte_carlo, aes(x = X)) +
geom_histogram() +
geom_vline(xintercept = 13)
p_val
longestRun = function(flips){
# the first flip is always a run of length 1.
MaxRunSoFar = 1
currentRun = 1
for(i in 2:length(flips)){ # for every flip
# if it is equal to the last flip
if(flips[i]==flips[i-1]){
# then increase the length of the currentRun
currentRun = currentRun + 1
# and if the run is larger than the maxRunSoFar, redefine that.
if(currentRun>MaxRunSoFar) MaxRunSoFar = currentRun
}
# otherwise,
if(flips[i]!=flips[i-1]){
# set the current run back to 1
currentRun=1
}
}
return(MaxRunSoFar)
}
sequence_of_flips = "THTHHHTTTTHTTTHTTHTHTTTTHHHTHHHTHTHHTHHHTHTTHHHTTTHTTTHHHTHTTTHTHHHTHTHTHHTTTHTHTHTTTHTHHHTTHTHHHHTHTTHTHTTHTHHHTHTHHTHTHTHHTHHHHTTHHTTHTTTHHHTHHHTHHTHHTHTTHTHHTHHHTHTHHHHTTHHHHTTTHTTHHHHTTHHTTHTTHHHH"
s= sequence_of_flips %>% strsplit( split = "") %>% unlist() %>% longestRun()
s
# First, write a function to simulate X
simulate_X = function(){
return(sample(c("H","T"), 200,replace=T))
}
# Second, write a function to evaluate whether X \in A.
check_if_X_in_A = function(X){
return(X  <= s)
}
# Now, we are going to do it lots of times.
# Let's arrange the simulations in a data.frame with three columns
r = 10000
monte_carlo = data.frame(replicate = 1:r,
X = rep(NA,r),
X_in_A = rep(NA, r))
for(i in 1:r){
monte_carlo$X[i] = simulate_X()
monte_carlo$X_in_A[i] = check_if_X_in_A(monte_carlo$X[i])
}
monte_carlo = as_tibble(monte_carlo)
p_val = monte_carlo %>% summarise(mean(X_in_A))
p_val
df <- NULL
for(i in 1:1000){
new <- longestRun(sample(c("H","T"), 10000,replace=T))
df = rbind(df, data.frame(longest_run = as.numeric(new)))
}
ggplot(df, aes(x = longest_run)) +
geom_histogram() +
geom_vline(xintercept = 5)
KarlsFlip1 = "HTHTHTHTHTHTHTHTHTHTHTHTHTHTHTHTHHTHTHTHTHTHTHTTHTHTHTHTHTHTHHTHTHTHTHTHTHTHTHTHTHTHTHTHTHHTTHTHTHTHTHTHTHTHTHTHTHTHTHHTHTHTHTHTHTHTHTHTHTHTHTTHTHTHTHTHTHTHTHTHTHTHTHTHHTHTHTHTHTHTHTHTHTHTHTHHTHTHTHTH"
KarlsFlip2 = "HHHTHTTTHHTHHTHHHTTTTHTHTHHTTHTHHHTHHTHTTTHTHHHTHTTTHTHTHHTHTHTTHTHHTHTHTTTHTHHHTHTHTTHTHTHHTHTHTHHHTHTTTHTHHTHTHTHHTTTHTHHTHHTTTTHTHTHHHTHTTHTHHTHTHTTHTHHTHTHHHTHHHTHTTTHTTHTTTHTHHHTHTHTTHTHHTHHTHTTT"
KarlsFlip3 = "HHTHTHTTTHTHHHTHHTTTHTHHTHTTTHTHTHHTHTHTTHTHHHHHHTTTHTHTHHTHTTTHTHHTHTHTTTHTHHHTTHTTTHTHTHHHHTHTTHHTTTTTHTHHHTHTHTTTTTHHHTHHTHHTHHHTTTTHTHTHHHTHHTTTTTHTHHHTHTHTHTTTHTHHHTHTHTHTTHTHHTHTHTHTTTTHTHHHTHTH"
KarlsFlip4 = "HTHHHHHHHTHTTHHTTHHHTHTHTTTHHTHHHTHHTTHTTTTTTTTTHTHHTTTTTHTHTHTHHTTHTTHTTTTTHHHTHTTTHTHTHHHTHTTTTHTHTHHTTHTHTTHHTHTHHHHTHTTHHTTHTTHTTHTHHHHHHTTTTTTHHHTTHTHHHHTTTHTTHHHTTHTHHTTTHHTHHTTTHTHHTHHHTHHTTHHH"
KarlsFlip5 = "HHHHHHHHHHHTTTTTTTTTTTHHHHHHHHHHHHTTTTTTTTTTTHHHHHHHHHHHHHTTTTTTTTTTHHHHHHHHHHTTTTTTTTHHHHHHHHTTTTTTTHHHHHHHHHTTTTTTTTTHHHHHHHHTTTHHHHHHHHHHHTTTTTTTTTTTHHHHHHHHHHHHTTTTTTTTTTTHHHHHHHHHHHHHTTTTTTTTTTHH"
KarlsFlip6 = "TTHTTTHTTTTTTTHTHTHTHTTHTTHTHHTHHTTTHHTHTTTHTHHTHHHTHTTHHTHHTTHTHTTTTHTHTTTHHTTTTTTTTHTHHTTHTTTTTTHTHTHTHTTTHTTHHTTHTTTHHTTTHTTHTTTTHTTTTHHTTTHTHTHHHTTTTTTHTHHTTTTTTTTTTTTHHHTTTHHHTTTHTTTHTHTTHTTTTTHT"
library(dplyr)
library(tidyverse)
df <- NULL
for(i in 1:1000){
new <- longestRun(sample(c("H","T"), 10000,replace=T))
df = rbind(df, data.frame(longest_run = as.numeric(new)))
}
ggplot(df, aes(x = longest_run)) +
geom_histogram() +
geom_vline(xintercept = 5)
right_side <- df %>% filter(longest_run > 5)
p_val <- nrow(right_side) / nrow(df)
p_val
df <- NULL
for(i in 1:1000){
new <- longestRun(sample(c("H","T"), 10000,replace=T))
df = rbind(df, data.frame(longest_run = as.numeric(new)))
}
ggplot(df, aes(x = longest_run)) +
geom_histogram() +
geom_vline(xintercept = 5)
right_side <- df %>% filter(longest_run <= 5)
p_val <- nrow(right_side) / nrow(df)
p_val
#  X1,…,Xn∈{0,1} where Xi = 1 denotes packers win the game in week i.
n = 200
phat = .5
simulate_S = function(){
X = rbernoulli(n=n,  phat)
S = mean(X)
return(S)
}
r = 1000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
}
library(tidyverse)
library(purrr)
#  X1,…,Xn∈{0,1} where Xi = 1 denotes packers win the game in week i.
n = 200
phat = .5
simulate_S = function(){
X = rbernoulli(n=n,  phat)
S = mean(X)
return(S)
}
r = 1000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
}
monte_carlo = as_tibble(monte_carlo)
qs = monte_carlo$S %>% quantile(prob =c(.050, .950))
qs
