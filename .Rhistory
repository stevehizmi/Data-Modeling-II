return(abs(S) >= 0.11)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
hist(monte_carlo$S)
simulate_S = function(){
# simulate S
return(rbinom(n = 1, size = 416, prob = 0.1))
}
# test if true proportion is >= to observed proportion
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 47)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
hist(monte_carlo$S)
n = length(burn_out)
simulate_S = function(){
X = rgeom(n,phat)
S = mean(X)
return(S)
}
r = 1000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
}
monte_carlo = as_tibble(monte_carlo)
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
hist(monte_carlo$S, main = "Imagined Experiments", breaks = 30)
lines(qs[1]*c(1,1), c(0,10^9), col = "red", lwd = 3)
lines(qs[2]*c(1,1), c(0,10^9), col = "red", lwd = 3)
simulate_S = function(){
# simulate S
return(rbinom(n = 1, size = 416, prob = 0.1))
}
# test if true proportion is >= to observed proportion
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 47)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
hist(monte_carlo$S)
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
simulate_S = function(){
# simulate S
return(rbinom(n = 1, size = 416, prob = 0.1))
}
# test if true proportion is >= to observed proportion
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 47)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
hist(monte_carlo$S, main = "Imagined Experiments", breaks = 30)
lines(qs[1]*c(1,1), c(0,10^9), col = "red", lwd = 3)
lines(qs[2]*c(1,1), c(0,10^9), col = "red", lwd = 3)
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
hist(monte_carlo$S, main = "Imagined Experiments", breaks = 30)
lines(qs[1]*c(1,1), c(0,10^9), col = "red", lwd = 3)
lines(qs[2]*c(1,1), c(0,10^9), col = "red", lwd = 3)
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
hist(monte_carlo$S, main = "Imagined Experiments", breaks = 30)
lines(qs[1]*c(1,1), c(0,10^9), col = "red", lwd = 3)
lines(qs[2]*c(1,1), c(0,10^9), col = "red", lwd = 3)
simulate_S = function(){
# simulate S
return(rbinom(n = 1, size = 416, prob = 0.1))
}
# test if true proportion is >= to observed proportion
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 47)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
simulate_S = function(){
# simulate S using 10%
return(rbinom(n = 1, size = 416, prob = 0.1))
}
# test if true proportion is >= to observed proportion
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 47)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
simulate_S = function(){
# simulate S using 10%
return(rbinom(n = 1, size = 416, prob = 0.1))
}
# test if true proportion is >= to observed proportion
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 47)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
simulate_S = function(){
# simulate S using 10%
return(rbinom(n = 1, size = 416, prob = 0.1))
}
# test if true proportion is >= to observed proportion
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 47)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
simulate_S = function(){
# simulate S using 10%
return(rbinom(n = 1, size = 416, prob = 0.1))
}
# test if true proportion is >= to observed proportion
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 47)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
simulate_S = function(){
# simulate S using 10%
return(rbinom(n = 1, size = 416, prob = 0.1) / 416)
}
# test if simulated S is surprising
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 0.01)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
simulate_S = function(){
# simulate S using 10%
return(rbinom(n = 1, size = 416, prob = 0.1) / 416)
}
# test if simulated S is surprising
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 0.11)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
simulate_S = function(){
# simulate S using 10%
return(rbinom(n = 1, size = 416, prob = 0.1))
}
# test if simulated S is surprising
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 47)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
# sample proportion
n = 416
phat = 47/416
simulate_S = function(){
# simulate S using 10%
X = rbernoulli(n = n, phat)
S = mean(X)
return(S)
}
# test if simulated S is surprising
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 47)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
hist(monte_carlo$S, main = "Imagined Experiments", breaks = 30)
lines(qs[1]*c(1,1), c(0,10^9), col = "red", lwd = 3)
lines(qs[2]*c(1,1), c(0,10^9), col = "red", lwd = 3)
# sample proportion
n = 416
phat = 47/416
simulate_S = function(){
# simulate S using 10%
X = rbernoulli(n = n, phat)
S = mean(X)
return(S)
}
# test if simulated S is surprising
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 47)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
monte_carlo
# sample proportion
n = 416
phat = 47/416
simulate_S = function(){
# simulate S using 10%
X = rbernoulli(n = n, phat)
S = mean(X)
return(S)
}
# test if simulated S is surprising
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 0.11)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
monte_carlo
# sample proportion
n = 416
phat = 47/416
simulate_S = function(){
# simulate S using 10%
X = rbernoulli(n = n, phat)
S = mean(X)
return(S)
}
# test if simulated S is surprising
check_if_S_in_surprising_set = function(S){
return(abs(S) >= 0.10)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
monte_carlo
# sample proportion
n = 416
phat = 47/416
simulate_S = function(){
# simulate S using 10%
X = rbernoulli(n = n, 0.1)
S = mean(X)
return(S)
}
# test if simulated S is surprising
check_if_S_in_surprising_set = function(S){
return(abs(S) >= phat)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
monte_carlo
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
hist(monte_carlo$S, main = "Imagined Experiments", breaks = 30)
lines(qs[1]*c(1,1), c(0,10^9), col = "red", lwd = 3)
lines(qs[2]*c(1,1), c(0,10^9), col = "red", lwd = 3)
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
hist(monte_carlo$S, main = "Imagined Experiments", breaks = 30)
lines(qs[1]*c(1,1), c(0,10^9), col = "red", lwd = 3)
lines(qs[2]*c(1,1), c(0,10^9), col = "red", lwd = 3)
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
hist(monte_carlo$S, main = "Imagined Experiments", breaks = 30)
lines(qs[1]*c(1,1), c(0,10^9), col = "red", lwd = 3)
lines(qs[2]*c(1,1), c(0,10^9), col = "red", lwd = 3)
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
hist(monte_carlo$S, main = "Imagined Experiments", breaks = 30)
lines(qs[1]*c(1,1), c(0,10^9), col = "red", lwd = 3)
lines(qs[2]*c(1,1), c(0,10^9), col = "red", lwd = 3)
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
hist(monte_carlo$S, main = "Imagined Experiments", breaks = 30)
lines(qs[1]*c(1,1), c(0,10^9), col = "red", lwd = 3)
lines(qs[2]*c(1,1), c(0,10^9), col = "red", lwd = 3)
phat = 8 / 502
n = 31375
simulate_S = function(){
X = rbernoulli(n=n,  phat)
S = mean(X)
return(S)
}
r = 1000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
}
monte_carlo = as_tibble(monte_carlo)
mean(monte_carlo$S)
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
# sample proportion
n = 416
phat = 47/416
simulate_S = function(){
# simulate S using 10%
X = rbernoulli(n = n, 0.1)
S = mean(X)
return(S)
}
# test if simulated S is surprising
check_if_S_in_surprising_set = function(S){
return(abs(S) >= phat + 0.1)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
monte_carlo
# sample proportion
n = 416
phat = 47/416
simulate_S = function(){
# simulate S using 10%
X = rbernoulli(n = n, 0.1)
S = mean(X)
return(S)
}
# test if simulated S is surprising
check_if_S_in_surprising_set = function(S){
return(abs(S) >= phat + 0.01)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
monte_carlo %>% summarise(mean(S_in_suprising_set))
monte_carlo
# sample proportion
n = 416
phat = 47/416
simulate_S = function(){
# simulate S using 10%
X = rbernoulli(n = n, 0.1)
S = mean(X)
return(S)
}
# test if simulated S is surprising
# 0.11 (47 / 416) +/- 0.01 would be surprising
check_if_S_in_surprising_set = function(S){
return(abs(S) >= phat + 0.01)
}
# using monte_carlo
r = 10000
monte_carlo = data.frame(replicate = 1:r,
S = rep(NA,r),
S_in_suprising_set = rep(NA, r))
for(i in 1:r){
monte_carlo$S[i] = simulate_S()
monte_carlo$S_in_suprising_set[i] = check_if_S_in_surprising_set(monte_carlo$S[i])
}
monte_carlo = as_tibble(monte_carlo)
p_val = monte_carlo %>% summarise(mean(S_in_suprising_set))
p_val
qs = monte_carlo$S %>% quantile(prob =c(.025, .975))
qs
hist(monte_carlo$S, main = "Imagined Experiments", breaks = 30)
lines(qs[1]*c(1,1), c(0,10^9), col = "red", lwd = 3)
lines(qs[2]*c(1,1), c(0,10^9), col = "red", lwd = 3)
